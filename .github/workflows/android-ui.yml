name: run UI tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  database:
    runs-on: ubuntu-latest

    env:
      DB_USER: root
      DB_PASSWORD: somepassword

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -u root -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_PASSWORD';"
          mysql -e "CREATE DATABASE IF NOT EXISTS orders; 
          CREATE DATABASE IF NOT EXISTS review;
          CREATE DATABASE IF NOT EXISTS product;
          CREATE DATABASE IF NOT EXISTS user;
          create table if not exists orders.orders
          (
              id         bigint auto_increment primary key,
              created_at datetime     null,
              status     varchar(255) null,
              updated_at datetime     null,
              user_id    bigint       null
          );" -u$DB_USER -p$DB_PASSWORD
          mysql -e  "create table if not exists user.users
          (
              id         bigint auto_increment primary key,
              email      varchar(255) null,
              is_enabled bit          not null,
              last_name  varchar(255) null,
              link_photo varchar(255) null,
              name       varchar(255) null,
              password   varchar(255) null
          );

          insert into user.users(email, is_enabled, last_name, link_photo, name, password)
          values ('ivanova.a@yandex.ru', true, 'Иванова', '/app/images/1.0.jpg', 'Анастасия',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('a.petrov@yandex.ru', true, 'Петров', '/app/images/2.0.jpg', 'Андрей',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('danil@yandex.ru', true, 'Цыганов', '/app/images/3.0.jpg', 'Данил',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('vlad123@yandex.ru', true, 'Мартынов', '/app/images/4.0.jpg', 'Владислав',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('ivanova.a2@yandex.ru', true, 'Иванова', '/app/images/5.0.jpg', 'Алена',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'); #123456 password

          " -u$DB_USER -p$DB_PASSWORD
  run-user-service:
    needs: database
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      ACTIVE_PROFILE: default
      CONFIG_URI: http://localhost:8088
      SPRING_PROFILES_ACTIVE: native
      EUREKA_HOSTNAME: localhost
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run serverconfig
        env:
          SERVER_PORT: 8088
        run: |-
          cd api/serverconfig
          mvn spring-boot:run &
          sleep 1m
      - name: Run eurekaserver
        run: |-
          cd api/eurekaserver
          mvn spring-boot:run &
          sleep 1m
      - name: Run gateway-server
        run: |-
          cd api/gateway-server
          mvn spring-boot:run &
          sleep 1m
      - name: Run order-service
        run: |-
          cd api/order-service
          mvn spring-boot:run &
          sleep 1m
      - name: Run user-service
        run: |-
          cd api/user-service
          mvn spring-boot:run &
          sleep 1m
      - name: Test
        run: |-
          curl -i -X POST \
          -H "Content-Type: application/json" -d "{\"email\":\"danil@yandex.ru\", \"password\":\"123456\"}" \
          "http://localhost:8084/user-service/user/login"
      - name: Test2
        run: |-
          curl -i -X POST \
          -d "{\"email\":\"danilru\", \"password\":\"123456\"}" \
          "http://127.0.0.1:8084/user/login"
      
    #  - name: Setup Gradle
    #    uses: gradle/gradle-build-action@v3

    #  - name: Enable KVM group perms  
    #    run: |
    #      echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
    #      sudo udevadm control --reload-rules
    #      sudo udevadm trigger --name-match=kvm

    #  - name: AVD cache
    #    uses: actions/cache@v4
    #    id: avd-cache
    #    with:
    #      path: |
    #        ~/.android/avd/*
    #        ~/.android/adb*
    #      key: avd-ubuntu-${{ matrix.api-level }}-${{ env.cache-version }}

    #  - name: Create AVD and generate snapshot for caching
    #    if: steps.avd-cache.outputs.cache-hit != 'true'
    #    uses: reactivecircus/android-emulator-runner@v2
    #    with:
    #      api-level: 29
    #      target: default
    #      arch: x86_64
    #      force-avd-creation: false
    #      emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #      disable-animations: true
    #      script: echo "Generated AVD snapshot for caching."

    #  - name: Run device tests
    #    # See https://github.com/orgs/community/discussions/27121
    #    uses: reactivecircus/android-emulator-runner@v2
    #    with:
    #      arch: x86_64
    #      force-avd-creation: false
    #      emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    #      disable-animations: true
    #      profile: Nexus 6
    #      api-level: 29
    #      target: default
    #      working-directory: client
    #      script: |-
    #        ./gradlew app:connectedDebugAndroidTest --info --stacktrace --no-watch-fs -Dorg.gradle.workers.max=2

    #  - name: Upload test results
    #    if: always()
    #    uses: actions/upload-artifact@v4
    #    with:
    #      name: test-results
    #      path: |
    #        **/build/reports/*
    #        **/build/outputs/*/connected/*
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: user
          MYSQL_ROOT_USER: root
          MYSQL_ROOT_PASSWORD: somepassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      orders_mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: orders
          MYSQL_ROOT_USER: root
          MYSQL_ROOT_PASSWORD: somepassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3