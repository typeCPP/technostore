name: "order-service"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-order-service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |-
          cd api/order-service
          mvn -B -DargLine="-ACTIVE_PROFILE=default -CONFIG_URI=http://localhost:8088" package --file pom.xml -DskipTests
  test-order-service:
    needs: build-order-service
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      ACTIVE_PROFILE: default
      CONFIG_URI: http://localhost:8088
      EUREKA_HOSTNAME: localhost
      DB_USER: root
      DB_PASSWORD: somepassword
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -u root -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_PASSWORD';"
          mysql -e "CREATE DATABASE IF NOT EXISTS orders; 
          CREATE DATABASE IF NOT EXISTS review;
          CREATE DATABASE IF NOT EXISTS product;
          CREATE DATABASE IF NOT EXISTS user;
          " -u$DB_USER -p$DB_PASSWORD
      - name: Run serverconfig
        env:
          SERVER_PORT: 8088
        run: |-
          cd api/serverconfig
          mvn spring-boot:run -Dspring-boot.run.arguments="--spring.profiles.active=native" &
          sleep 1m
      - name: Run eurekaserver
        run: |-
          cd api/eurekaserver
          mvn spring-boot:run &
          sleep 1m
      - name: Run gateway-server
        run: |-
          cd api/gateway-server
          mvn spring-boot:run &
          sleep 1m
      - name: Run order-service
        run: |-
          cd api/order-service
          mvn spring-boot:run &
          sleep 1m
      - name: Run user-service
        run: |-
          cd api/user-service
          mvn spring-boot:run &
          sleep 1m
      - name: Run review-service
        run: |-
          cd api/review-service
          mvn spring-boot:run &
          sleep 1m
      - name: Run product-service
        run: |-
          cd api/product-service
          mvn spring-boot:run &
          sleep 1m
      - name: Set data
        run: |-
          mysql -u$DB_USER -p$DB_PASSWORD < api/docker/init.sql
      - name: Run tests for order-service
        run: |-
          cd api/order-service
          mvn -B test --file pom.xml
      - name: Generate Coverage Report
        run: |
          cd api/order-service
          mvn -B package -Pcoverage

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true
          jacoco-csv-file: api/order-service/target/site/jacoco/jacoco.csv

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: api/order-service/target/site/jacoco/

      - name: Jacoco Report to PR
        id: jacoco1
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/api/order-service/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          debug-mode: false
          min-coverage-overall: 80
          min-coverage-changed-files: 80
          title: Order Microservice Code Coverage

      - name: Get the Coverage info
        run: |
          echo "Total coverage ${{ steps.jacoco.outputs.coverage-overall }}"
          echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"
