name: run UI tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  database:
    runs-on: ubuntu-latest

    env:
      DB_USER: root
      DB_PASSWORD: root

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e "CREATE DATABASE IF NOT EXISTS orders; 
          CREATE DATABASE IF NOT EXISTS review;
          CREATE DATABASE IF NOT EXISTS product;
          CREATE DATABASE IF NOT EXISTS user;
          create table if not exists orders.orders
          (
              id         bigint auto_increment primary key,
              created_at datetime     null,
              status     varchar(255) null,
              updated_at datetime     null,
              user_id    bigint       null
          );" -u$DB_USER -p$DB_PASSWORD
          mysql -e  "create table if not exists user.users
          (
              id         bigint auto_increment primary key,
              email      varchar(255) null,
              is_enabled bit          not null,
              last_name  varchar(255) null,
              link_photo varchar(255) null,
              name       varchar(255) null,
              password   varchar(255) null
          );

          insert into user.users(email, is_enabled, last_name, link_photo, name, password)
          values ('ivanova.a@yandex.ru', true, 'Иванова', '/app/images/1.0.jpg', 'Анастасия',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('a.petrov@yandex.ru', true, 'Петров', '/app/images/2.0.jpg', 'Андрей',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('danil@yandex.ru', true, 'Цыганов', '/app/images/3.0.jpg', 'Данил',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('vlad123@yandex.ru', true, 'Мартынов', '/app/images/4.0.jpg', 'Владислав',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'), #123456 password
                ('ivanova.a2@yandex.ru', true, 'Иванова', '/app/images/5.0.jpg', 'Алена',
                  '$2a$10$t0q6oW9/t0/8rEvpeeUiq.W/8JdrOSsjbXNZNEGV.yy4jsOx81ToG'); #123456 password

          " -u$DB_USER -p$DB_PASSWORD
  build-user-service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: |-
          cd api/user-service
          mvn -B -DargLine="-ACTIVE_PROFILE=default -CONFIG_URI=http://localhost:8088" package --file pom.xml -DskipTests
  run-user-service:
    needs: build-user-service
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      ACTIVE_PROFILE: default
      CONFIG_URI: http://localhost:8088
      SPRING_PROFILES_ACTIVE: native
      EUREKA_HOSTNAME: localhost
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run serverconfig
        env:
          SERVER_PORT: 8088
        run: |-
          cd api/serverconfig
          mvn spring-boot:run &
      - name: Run eurekaserver
        run: |-
          cd api/eurekaserver
          mvn spring-boot:run &
      - name: Run gateway-server
        run: |-
          cd api/gateway-server
          mvn spring-boot:run &
  run-tests:
    runs-on: ubuntu-latest
    needs: [database, run-user-service]
    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        cache: gradle
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
    
    - name: Build app
      run: |-
        cd client
        ./gradlew assembleDebug  app:assembleDebugAndroidTest
    - name: Run tests
      uses: emulator-wtf/run-tests@v0
      with:
        api-token: ${{ secrets.EW_API_TOKEN }}
        app: client/app/build/outputs/apk/debug/app-debug.apk
        test: client/app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
        outputs-dir: build/test-results
        devices: |
          model=Pixel2,version=29
        record-video: true
    - name: Publish test report
      uses: mikepenz/action-junit-report@v2
      if: always()
      with:
        report_paths: 'build/test-results/**/*.xml'